user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush      on;

    keepalive_timeout  65;

    #gzip  on;

    # =========================================================
    # 新增：HTTP (80 端口) Server 區塊，用於重定向到 HTTPS
    # 此服務監聽 HTTP 請求，並將它們重定向到 HTTPS。
    # 請將 server_name 替換為您的實際 IP 或域名。
    # =========================================================
    server {
        listen       80;
        listen  [::]:80;
        server_name  192.168.36.62; # <<< 請替換為您的實際 IP 地址或域名 (例如: your-domain.com)

        # 將所有 HTTP 請求重定向到 HTTPS
        return 301 https://$host$request_uri;
    }


    # =========================================================
    # 修改：HTTPS (443 端口) Server 區塊
    # 此服務將透過 HTTPS 提供您的前端應用程式。
    # 請將 server_name 替換為您的實際 IP 或域名。
    # 確保 ssl_certificate 和 ssl_certificate_key 指向容器內憑證的正確路徑。
    # =========================================================
    server {
        listen       443 ssl; # 監聽 443 端口，並啟用 SSL
        listen  [::]:443 ssl;
        server_name  192.168.36.62; # <<< 請替換為您的實際 IP 地址或域名 (例如: your-domain.com)

        # --- SSL 憑證路徑 ---
        # 這些路徑應與您在 Dockerfile 中 COPY 憑證到的容器內部路徑一致
        ssl_certificate     /etc/nginx/certs/certificate.crt; # 憑證文件
        ssl_certificate_key /etc/nginx/certs/private.key;   # 私鑰文件

        # --- 基本 SSL 配置 ---
        # 這些配置有助於提升安全性
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_protocols TLSv1.2 TLSv1.3; # 建議僅使用較新的 TLS 協議
        ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256";
        ssl_prefer_server_ciphers on;

        # --- API 反向代理設定 (與您原有配置相同) ---
        location /api/ {
            proxy_pass http://java:8080/; # 'java' 是 Docker Compose 服務名稱
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # --- 前端網站檔案根目錄設定 (與您原有配置相同) ---
        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            try_files $uri $uri/ /index.html;
        }

        # --- 錯誤頁面設定 (與您原有配置相同) ---
        error_page  500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }


    # =========================================================
    # 保留：您原本的 6173 端口 Server 區塊 (可選，但建議移除或修改)
    # 如果您希望所有流量都走 80/443 端口，可以考慮移除這個獨立的 6173 服務。
    # 或者，如果您需要讓某些服務同時透過 6173 端口提供，則保留。
    # =========================================================
    server {
        listen        6173; # 監聽 docker 內部的 port IPv4
        listen  [::]:6173;  # 監聽 docker 內部的 port IPv6
        server_name  localhost; # 這裡的 localhost 僅在容器內部有效

        location /api/ {
            proxy_pass http://java:8080/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            try_files $uri $uri/ /index.html;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

    include /etc/nginx/conf.d/*.conf;
}