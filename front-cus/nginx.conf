user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush      on;

    keepalive_timeout  65;

    #gzip  on;

    # =========================================================
    # HTTP (80 端口) Server 區塊，用於重定向到 HTTPS
    # =========================================================
    server {
        listen       80;
        listen  [::]:80;
        server_name  192.168.36.62; # <<< 請確認這是你主機在區網的 IP 或網域名稱
                                      # 範例：server_name your.domain.com;
                                      # 範例：server_name 192.168.1.100;
        return 301 https://$host$request_uri;
    }


    # =========================================================
    # HTTPS (443 端口) Server 區塊
    # =========================================================
    server {
        listen       443 ssl;
        listen  [::]:443 ssl;
        server_name  192.168.36.62; # <<< 與上方保持一致，請確認是可訪問的 IP 或網域名稱

        # --- SSL 憑證路徑 ---
        ssl_certificate      /etc/nginx/certs/certificate.crt;
        ssl_certificate_key  /etc/nginx/certs/private.key;

        # --- 基本 SSL 配置 ---
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256";
        ssl_prefer_server_ciphers on;

        # --- API 反向代理設定 ---
        location /api/ {
            proxy_pass http://java:8080/; # 將請求轉發到 Docker 網路中的 'java' 服務
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # --- WebSocket/SockJS 代理設定 (如果你的前端有使用，非常重要！) ---
        # 假設你的前端透過 /ws/ 或 /socket.io/ 連線到後端的 WebSocket
        # 請根據你的實際 WebSocket 路徑調整
        location ~ ^/(ws|socket.io)/ { # 示例：匹配 /ws/ 或 /socket.io/ 開頭的路徑
            proxy_pass http://java:8080; # 同樣代理到你的 Java 後端服務
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_read_timeout 86400s; # 增加 WebSocket 連線的超時時間
        }


        # --- 前端網站檔案根目錄設定 ---
        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            try_files $uri $uri/ /index.html;
        }

        # --- 錯誤頁面設定 ---
        error_page  500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

    # 您原有的 6173 端口 Server (建議移除或修改)
    # 由於你的主要目標是透過 80/443 對外提供服務，
    # 內部 6173 端口的服務如果不需要對外，可以考慮移除這個 server 區塊。
    # 如果這個服務有特定的內部用途，請保留。
    server {
        listen         6173;
        listen  [::]:6173;
        server_name    localhost; # 這裡的 localhost 僅在容器內部有效

        location /api/ {
            proxy_pass http://java:8080/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            try_files $uri $uri/ /index.html;
        }

        error_page     500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

    include /etc/nginx/conf.d/*.conf;
}